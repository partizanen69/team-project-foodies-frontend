{"version":3,"file":"static/js/403.e3b2891e.chunk.js","mappings":"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","sources":["assets/icons/burger-bar.svg","webpack://react-homework-template/./src/components/Header/Header.module.scss?6eb7","components/Header/Header.jsx"],"sourcesContent":["var _path, _path2, _path3, _path4;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgBurgerBar(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 28,\n    height: 28,\n    viewBox: \"0 0 28 28\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M24.5 11.6665H3.5\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M24.5 7H3.5\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M24.5 16.3335H3.5\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M24.5 21H3.5\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgBurgerBar);\nexport default __webpack_public_path__ + \"static/media/burger-bar.3d71d679ba10f3983585537b227ee306.svg\";\nexport { ForwardRef as ReactComponent };","// extracted by mini-css-extract-plugin\nexport default {\"header_container\":\"Header_header_container__cW9hf\",\"header_container__light\":\"Header_header_container__light__Iexym\",\"burger_btn\":\"Header_burger_btn__xbl5n\",\"burger_icon\":\"Header_burger_icon__g1l7q\",\"burger_icon__dark\":\"Header_burger_icon__dark__8WQyn\",\"logo\":\"Header_logo__shVBB\",\"logo__dark\":\"Header_logo__dark__-4X0S\",\"profile_bar_wrapper\":\"Header_profile_bar_wrapper__9X9R4\",\"dropdown_menu\":\"Header_dropdown_menu__uqKFz\",\"dropdown_menu__main\":\"Header_dropdown_menu__main__Y5MKR\",\"dropdown_menu_link_img\":\"Header_dropdown_menu_link_img__Kyty0\",\"dropdown_menu_link\":\"Header_dropdown_menu_link__5+Yno\",\"profile_bar\":\"Header_profile_bar__Do-I8\",\"profile_bar__light\":\"Header_profile_bar__light__FXV+P\",\"profile_bar_unauthenticated\":\"Header_profile_bar_unauthenticated__asTjS\",\"avatar_wrapper\":\"Header_avatar_wrapper__I1jIz\",\"avatar\":\"Header_avatar__H1JXw\",\"name_wrapper\":\"Header_name_wrapper__p3Vsr\",\"profile_bar_name\":\"Header_profile_bar_name__6W0xL\",\"profile_bar_name__dark\":\"Header_profile_bar_name__dark__Amqhy\",\"burger\":\"Header_burger__k5ipm\",\"sign_in_block\":\"Header_sign_in_block__s0Psa\",\"sign_up_block\":\"Header_sign_up_block__B6tRq\"};","import React, { useEffect, useState, lazy } from 'react';\nimport { useSelector } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\nimport PropTypes from 'prop-types';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ReactComponent as BurgerBar } from '../../assets/icons/burger-bar.svg';\n\nimport s from './Header.module.scss';\n\nconst Navigation = lazy(() => import('../Navigation/Navigation'));\n\nconst Header = ({ openModal }) => {\n  const { user } = useSelector(state => state.auth);\n  const isMainPage = useSelector(state => state.ui.isMainPage);\n\n  const [isLoggedIn, setIsLoggedIn] = useState(!!user);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);\n  const [isDropDownShown, setIsDropDownShown] = useState(false);\n\n  const handleResize = () => {\n    setIsMobile(window.innerWidth < 768);\n  };\n\n  useEffect(() => {\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  const closeSidebar = () => {\n    setIsSidebarOpen(false);\n  };\n\n  const openSidebar = () => {\n    setIsSidebarOpen(true);\n  };\n\n  const toggleDropDown = () => {\n    setIsDropDownShown(!isDropDownShown);\n  };\n\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (!event.target.closest(`.${s.profile_bar}`)) {\n        setIsDropDownShown(false);\n      }\n    };\n\n    if (isDropDownShown) {\n      window.addEventListener('click', handleClickOutside);\n    }\n\n    return () => {\n      window.removeEventListener('click', handleClickOutside);\n    };\n  }, [isDropDownShown]);\n\n  useEffect(() => {\n    setIsLoggedIn(!!user);\n  }, [user]);\n\n  return (\n    <>\n      <div\n        className={isMainPage ? s.header_container : s.header_container__light}\n      >\n        <NavLink to=\"/\" className={isMainPage ? s.logo : s.logo__dark}>\n          foodies\n        </NavLink>\n        {(isSidebarOpen || (!isMobile && isLoggedIn)) && (\n          <Navigation\n            isSidebarOpen={isSidebarOpen}\n            closeSidebar={closeSidebar}\n          />\n        )}\n        {isLoggedIn ? (\n          <div className={s.profile_bar_wrapper}>\n            <div onClick={toggleDropDown} className={s.profile_bar}>\n              <span className={s.avatar_wrapper}>\n                <img\n                  src={\n                    user?.avatarURL\n                      ? user.avatarURL\n                      : process.env.PUBLIC_URL + '/avatar-placeholder.svg'\n                  }\n                  alt=\"avatar\"\n                  className={s.avatar}\n                />\n              </span>\n              <div className={s.name_wrapper}>\n                {user && <p className={s.profile_bar_name}>{user.name}</p>}\n                <svg\n                  width=\"18\"\n                  height=\"18\"\n                  viewBox=\"0 0 18 18\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M4.5 6.75L9 11.25L13.5 6.75\"\n                    stroke=\"white\"\n                    strokeWidth=\"1.5\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                  />\n                </svg>\n              </div>\n            </div>\n            <button\n              type=\"button\"\n              onClick={openSidebar}\n              className={s.burger_btn}\n            >\n              <BurgerBar\n                className={isMainPage ? s.burger_icon : s.burger_icon__dark}\n              />\n            </button>\n\n            {isDropDownShown && (\n              <div\n                className={isMainPage ? s.dropdown_menu : s.dropdown_menu__main}\n              >\n\n                <NavLink\n                  className={s.dropdown_menu_link}\n                  to={`user/${user.id}/recipies`}\n                >\n\n                  PROFILE\n                </NavLink>\n                <div className={s.dropdown_menu_link_img}>\n                  <button\n                    className={s.dropdown_menu_link}\n                    onClick={() => openModal('log out')}\n                  >\n                    LOG OUT\n                    <svg\n                      width=\"18\"\n                      height=\"18\"\n                      viewBox=\"0 0 18 18\"\n                      fill=\"none\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                    >\n                      <path\n                        d=\"M5.25 12.75L12.75 5.25\"\n                        stroke=\"white\"\n                        strokeWidth=\"1.3\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                      />\n                      <path\n                        d=\"M5.25 5.25H12.75V12.75\"\n                        stroke=\"white\"\n                        strokeWidth=\"1.3\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                      />\n                    </svg>\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div className={s.profile_bar_wrapper}>\n            <div className={s.profile_bar_unauthenticated}>\n              <button\n                type=\"button\"\n                onClick={() => openModal('sign in')}\n                className={s.sign_in_block}\n              >\n                SIGN IN\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => openModal('sign up')}\n                className={s.sign_up_block}\n              >\n                SIGN UP\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <ToastContainer\n        position=\"top-right\"\n        autoClose={2000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n        theme=\"light\"\n      />\n    </>\n  );\n};\n\nHeader.propTypes = {\n  openModal: PropTypes.func.isRequired,\n};\n\nexport default Header;\n"],"names":["_path","_path2","_path3","_path4","_extends","Object","assign","bind","n","e","arguments","length","t","r","hasOwnProperty","call","apply","SvgBurgerBar","_ref","svgRef","title","titleId","props","width","height","viewBox","fill","xmlns","ref","id","d","strokeWidth","strokeLinecap","strokeLinejoin","ForwardRef","Navigation","lazy","openModal","user","useSelector","state","auth","isMainPage","ui","isLoggedIn","setIsLoggedIn","useState","isSidebarOpen","setIsSidebarOpen","isMobile","setIsMobile","window","innerWidth","isDropDownShown","setIsDropDownShown","handleResize","useEffect","addEventListener","removeEventListener","handleClickOutside","event","target","closest","concat","s","_jsxs","_Fragment","children","className","_jsx","NavLink","to","closeSidebar","onClick","toggleDropDown","src","avatarURL","process","alt","name","stroke","type","openSidebar","BurgerBar","ToastContainer","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","theme"],"sourceRoot":""}